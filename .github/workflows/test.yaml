name: 'Test Release'

on:
  workflow_dispatch:
  push:
    branches:
      - test

jobs:
  test:
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Check system dependencies
        run: |
          # Check if dependencies are already installed
          echo "Checking for required dependencies..."
          
          if command -v pkg-config >/dev/null 2>&1; then
            echo "✓ pkg-config found"
          else
            echo "✗ pkg-config not found"
          fi
          
          if pkg-config --exists glib-2.0; then
            echo "✓ glib-2.0 found"
          else
            echo "✗ glib-2.0 not found"
          fi
          
          if pkg-config --exists webkit2gtk-4.0; then
            echo "✓ webkit2gtk-4.0 found"
          else
            echo "✗ webkit2gtk-4.0 not found"
          fi
          
          # Set environment variables for the build
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Create lockfile
        run: echo '"Riot Client:1888:12345:6VCDFORUm1nbDfZ4EReVqw:https"' > lockfile.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Verify build environment
        run: |
          echo "=== Build Environment Verification ==="
          echo "pkg-config version: $(pkg-config --version)"
          echo "pkg-config location: $(which pkg-config)"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: $PKG_CONFIG_ALLOW_SYSTEM_CFLAGS"
          echo "Testing glib-2.0:"
          pkg-config --libs --cflags glib-2.0 || echo "glib-2.0 not found"
          echo "=== End Verification ==="

      - name: Run Tests
        run: pnpm test --run

      - name: Generate build timestamp
        id: timestamp
        run: echo "BUILD_TIME=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Update version with timestamp for test
        run: |
          cd src-tauri
          # Get current version and append timestamp with test suffix
          CURRENT_VERSION=$(grep '"version"' tauri.conf.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
          NEW_VERSION="${CURRENT_VERSION}-test.${{ steps.timestamp.outputs.BUILD_TIME }}"
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" tauri.conf.json

      - name: Update product name for test
        run: |
          cd src-tauri
          sed -i 's/"productName": "vtjs"/"productName": "vtjs-test"/' tauri.conf.json
          sed -i 's/"title": "VTJS"/"title": "VTJS Test"/' tauri.conf.json
          sed -i 's/prod.json/test.json/' tauri.conf.json

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          VITE_APTABASE_KEY: ${{ secrets.APTABASE_KEY }}
        with:
          tagName: test-v__VERSION__
          releaseName: 'VTJS Test v__VERSION__'
          releaseBody: |
            Test Release
            
            Build Time: ${{ steps.timestamp.outputs.BUILD_TIME }}
            Channel: Test
            
            This is a test version for feature validation.
            See the assets to download this version and install.
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}

      - name: Update Test Gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.TOKEN }}
          gist_id: 0b5f7094000f4063d72276c5e05824aa
          file_path: ./test.json
